/*
*
* 进程
* document【http://nodejs.cn/api/process.html】
*
* */


// ============================================================================
// process 对象是一个全局变量，它提供当前 Node.js 进程的有关信息，以及控制当前 Node.js 进程。
// 因为是全局变量，所以无需使用 require()。

// process 对象是 EventEmitter 的实例。






// ============================================================================

// 当 Node.js 的事件循环数组已经为空，并且没有额外的工作被添加进来，事件 'beforeExit' 会被触发。
// 正常情况下，如果没有额外的工作被添加到事件循环数组，Node.js 进程会结束。
// 但是如果 'beforeExit' 事件绑定的监听器的回调函数中，含有一个可以进行异步调用的操作，那么 Node.js 进程会继续运行。


// ============================================================================






// 正常情况下，如果没有额外的工作被添加到事件循环数组，Node.js 进程会结束。
process.on('exit', (code) => {
    // 'exit' 事件监听器的回调函数，只允许包含同步操作。

    setTimeout(() => {
        console.log('该函数不会被执行');
    }, 0);

    console.log(`即将退出，退出码：${code}`);
});
console.log(123);
setTimeout(()=>{
    console.log(456);
},2000);


















